// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  module.exports = function(grunt) {
    var coffee, comp, css, css_file, curlArray, curlSave, http_files, js, ladda, misc, pure_http, sass, unlicend;
    comp = 'public/components/';
    css = 'public/css/';
    sass = 'public/sass/';
    js = 'public/js/';
    coffee = 'public/coffee/';
    ladda = 'https://raw.github.com/hakimel/Ladda/master/dist/';
    pure_http = 'http://yui.yahooapis.com/pure/0.2.0/';
    misc = [comp + 'modernizr/modernizr.js', comp + 'Chart.js/Chart.js', comp + 'magnific-popup/dist/jquery.magnific-popup.js', comp + 'selectize/selectize.js'];
    unlicend = ['<%= copy.yepnope.dest %>', '<%= copy.parsleyjs.dest %>', '<%= copy.underscore.dest %>'];
    http_files = [
      {
        url: ladda + 'ladda-themeless.min.css',
        file: sass + '_ladda-themeless-min.scss'
      }, {
        url: ladda + 'ladda.min.css',
        file: sass + '_ladda-mis.scss'
      }, {
        url: ladda + 'ladda.min.js',
        file: js + 'ladda.min.js'
      }, {
        url: ladda + 'spin.min.js',
        file: js + 'spin.min.js'
      }
    ];
    css_file = /([^\/]+)\.css$/;
    curlSave = function(url, file) {
      return "curl " + url + " > '" + file + "'";
    };
    curlArray = function(arr) {
      var elem;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = arr.length; _i < _len; _i++) {
          elem = arr[_i];
          _results.push(curlSave(elem.url, elem.file));
        }
        return _results;
      })()).join('&&');
    };
    this.initConfig({
      pkg: grunt.file.readJSON('package.json'),
      pure: grunt.file.readJSON(comp + 'pure/package.json'),
      parsleyjs: grunt.file.readJSON(comp + 'parsleyjs/component.json'),
      underscore: grunt.file.readJSON(comp + 'underscore/package.json'),
      yepnope: grunt.file.readJSON(comp + 'yepnope/bower.json'),
      zeptojs: grunt.file.readJSON(comp + 'zeptojs/bower.json'),
      shell: {
        pure: {
          command: curlSave(pure_http + 'pure-min.css', sass + 'pure/_pure.scss')
        },
        ladda: {
          command: curlArray(http_files)
        }
      },
      copy: {
        normalize: {
          src: comp + 'normalize-css/normalize.css',
          dest: sass + '_normalize.scss'
        },
        pure: {
          files: [
            {
              expand: true,
              filter: 'isFile',
              src: [comp + 'pure/src/**/css/*.css'],
              dest: sass + 'pure',
              rename: function(dest, src) {
                return dest + '/_' + src.match(css_file)[1] + '.scss';
              }
            }
          ]
        },
        popup: {
          src: comp + 'pure/src/magnific-popup/dist/magnific-popup.css',
          dest: sass + '_magnific-popup.scss'
        },
        yepnope: {
          src: comp + 'yepnope/yepnope.js',
          dest: js + 'yepnope.js'
        },
        parsleyjs: {
          src: comp(+'parsleyjs/parsley.js'),
          dest: js + 'parsley.js'
        },
        underscore: {
          src: comp + 'underscore/underscore.js',
          dest: js + 'underscore.js'
        },
        zeptojs: {
          src: comp + 'zeptojs/src/zepto.js',
          dest: js + 'zepto.js'
        }
      },
      license: {
        parsleyjs: {
          options: {
            banner: ['/*!', 'Parsley.js v<%= parsleyjs.version %> | MIT License | https://github.com/guillaumepotier/Parsley.js/blob/master/LICENCE.md', 'Copyright (c) 2013 Guillaume Potier - @guillaumepotier', '*/\n'].join('\n')
          },
          expand: true,
          cwd: js,
          src: ['<%= copy.parsleyjs.dest %>']
        },
        underscore: {
          options: {
            banner: ['/*!', 'Underscore.js v<%= underscore.version %>', 'http://underscorejs.org', '(c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.', 'Underscore may be freely distributed under the MIT license.', '*/\n'].join('\n')
          },
          expand: true,
          cwd: js,
          src: ['<%= copy.underscore.dest %>']
        },
        yepnope: {
          options: {
            banner: ['/*!', 'yepnope.js', 'Version - <%= yepnope.version %>', 'Alex Sexton - @SlexAxton - AlexSexton[at]gmail.com', 'Ralph Holzmann - @ralphholzmann - ralphholzmann[at]gmail.com', 'http://yepnopejs.com/', 'https://github.com/SlexAxton/yepnope.js/', 'Tri-license - WTFPL | MIT | BSD', '*/\n'].join('\n')
          },
          expand: true,
          cwd: js,
          src: ['<%= copy.yepnope.dest %>']
        },
        zepto: {
          options: {
            banner: ['/*!', 'Zepto.js v<%= zeptojs.version %> | MIT License | https://github.com/madrobby/zepto/blob/master/MIT-LICENSE', 'Copyright (c) 2008-2013 Thomas Fuchs', 'http://zeptojs.com/', '*/\n'].join('\n')
          },
          expand: true,
          cwd: js,
          src: ['<%= copy.zeptojs.dest %>']
        },
        pure: {
          options: {
            banner: ['/*!', 'Pure v<%= pure.version %>', 'Copyright 2013 Yahoo! Inc. All rights reserved.', 'Licensed under the BSD License.', 'https://github.com/yui/pure/blob/master/LICENSE.md', '*/\n'].join('\n')
          },
          expand: true,
          cwd: sass + '/pure/',
          src: ['*.scss', '!_pure.scss']
        }
      },
      coffeeredux: {
        options: {
          bare: true
        },
        src: coffee + 'main.coffee',
        dest: js + 'main.js'
      },
      compass: {
        dev: {
          options: {
            config: 'public/config.rb',
            basePath: 'public'
          }
        },
        production: {
          options: {
            config: 'public/config.rb',
            basePath: 'public',
            environment: 'production'
          }
        }
      },
      csslint: {
        options: {
          csslintrc: '.csslintrc'
        },
        files: {
          src: [css + 'main.css']
        }
      },
      concat: {
        options: {
          separator: '\n'
        },
        zepto: {
          src: [js + 'zepto.js'].concat(__slice.call(misc), __slice.call(unlicend), ['<%= coffeeredux.dest %>']),
          dest: js + 'zepto-pack.js'
        },
        jquery: {
          src: [comp + 'jquery/jquery.js'].concat(__slice.call(misc), __slice.call(unlicend), ['<%= coffeeredux.dest %>']),
          dest: js + 'jquery-pack.js'
        }
      },
      uglify: {
        options: {
          mangle: true,
          compress: true,
          report: 'gzip',
          preserveComments: 'some',
          banner: '/*! <%= pkg.name %> <%= grunt.template.today("yyyy-mm-dd") %> */\n'
        },
        zepto: {
          src: '<%= concat.zepto.dest %>',
          dest: js + 'zepto-pack-min.js'
        },
        jquery: {
          src: '<%= concat.jquery.dest %>',
          dest: js + 'jquery-pack-min.js'
        }
      }
    });
    this.registerMultiTask("license", "Stamps license banners on files.", function() {
      var banner, options, tally;
      options = this.options({
        banner: ""
      });
      banner = grunt.template.process(options.banner);
      tally = 0;
      this.files.forEach(function(filePair) {
        filePair.src.forEach(function(file) {
          grunt.file.write(file, banner + grunt.file.read(file));
          tally += 1;
        });
      });
      grunt.log.writeln("Stamped license on " + String(tally).cyan + " files.");
    });
    this.registerTask('bower-install', 'Installs Bower dependencies.', function() {
      var bower, done;
      bower = require('bower');
      done = this.async();
      bower.commands.install().on('data', function(data) {
        grunt.log.write(data);
      }).on('end', done);
    });
    this.loadNpmTasks('grunt-contrib-concat');
    this.loadNpmTasks('grunt-contrib-compass');
    this.loadNpmTasks('grunt-contrib-csslint');
    this.loadNpmTasks('grunt-contrib-copy');
    this.loadNpmTasks('grunt-contrib-uglify');
    this.loadNpmTasks('grunt-coffee-redux');
    this.loadNpmTasks('grunt-shell');
    this.registerTask('default', ['compass:dev', 'csslint', 'coffeeredux', 'concat']);
    this.registerTask('server', ['compass:production', 'csslint', 'coffeeredux', 'concat', 'uglify']);
    this.registerTask('build', ['shell', 'copy', 'license']);
    return this.registerTask('deep-build', ['bower-install', 'shell', 'copy', 'license']);
  };

}).call(this);
